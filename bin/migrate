#!/usr/bin/php
<?php

include __DIR__ . '/../../../../index.php';
include __DIR__ . '/Spinner.php';

$climate = new League\CLImate\CLImate;
$climate->extend('League\CLImate\TerminalObject\Dynamic\Spinner');
$climate->description('<blue>ProcessWire Migration module</blue> – CLI');

$climate->arguments->add([
    'migrate' => [
        'prefix'       => 'm',
        'longPrefix'   => 'migrate',
        'description'  => "Run a specific migration or all new* ones if none given.\n\t\t<dim>* From latest migrated to newest.</dim>",
        'castTo'      => 'string',
    ],
    'rollback' => [
        'prefix'       => 'r',
        'longPrefix'   => 'rollback',
        'description'  => 'Undo a specific migration or the latest one if none given.',
        'castTo'      => 'string',
    ],
    'new' => [
        'prefix'       => 'n',
        'longPrefix'   => 'new',
        'description'  => 'Bootstrap a new migrations file. Optionally you can already supply a description.',
        'castTo'      => 'string',
    ],
    'newTemplate' => [
        'prefix'       => 'nt',
        'longPrefix'   => 'newTemplate',
        'description'  => 'Bootstrap a new template migrations file. Optionally you can already supply a description.',
        'castTo'      => 'string',
    ],
    'newModule' => [
        'prefix'       => 'nm',
        'longPrefix'   => 'newModule',
        'description'  => 'Bootstrap a new module migrations file. Optionally you can already supply a description.',
        'castTo'      => 'string',
    ],
    'newField' => [
        'prefix'       => 'nf',
        'longPrefix'   => 'newField',
        'description'  => 'Bootstrap a new field migrations file. Optionally you can already supply a description.',
        'castTo'      => 'string',
    ],
    'info' => [
        'prefix'       => 'i',
        'longPrefix'   => 'info',
        'description'  => 'Get detailed info about a migration.',
        'castTo'      => 'string',
    ],
    'help' => [
        'prefix'       => 'h',
        'longPrefix'   => 'help',
        'description'  => 'Show all commands of the cli tool.',
        'noValue'     => true,
    ],
]);
$climate->arguments->parse();
$m =  $modules->get('Migrations');
$climate->backgroundBlack()->blue()->flank('Migration  CLI', ' ', 30);

/**
 * --help
 */
$__help = function($climate){
	$climate->addArt(__DIR__ . '/art');
	$climate->blueDraw('head');
	$climate->usage();
};

/**
 * --migrate
 */
$__migrate_new = function($climate) use ($m) {
	$toRun = $m->getLatestToMigrate();

	if(!$count = count($toRun)){
		$climate->out('Could not find any new migrations.');
		return;
	}

	$climate->green("Found $count new migrations. Starting...");
	foreach ($toRun as $file) {
		if($m->isMigrated($file)) continue;
		$m->migrate($file);
		$climate->out("Ran migration on " . basename($file) . ".");
	}
};

/**
 * --migrate filename
 */
$__migrate_file = function($climate, $filename) use ($m) {
	$files = $m->getMigrations();

	if(!$count = count($files)){
		$climate->red('No migrations found.');
		return;
	}

	if(!strpos($filename, '.php')) $filename .= '.php';

	$spinner = $climate->spinner('-\|/', 'Searching for file.');
	foreach (array_values($files) as $key => $file) {
		$spinner->current();
		if(basename($file) !== $filename) continue;

		if($m->isMigrated($file)) {
			$spinner->end("<red>$filename already migrated.</red>");
			break;
		}

		$spinner->end("Starting migration on $filename.");
		$m->migrate($file);
		$climate->green("Ran migration on $filename.");
		break;
	}
};

/**
 * --rollback
 */
$__rollback_latest = function($climate) use ($m) {
	$files = $m->getMigrations();

	foreach (array_reverse($files) as $file) {
		if(!$m->isMigrated($file)) continue;

		$m->rollback($file);
		$climate->green("Ran rollback on " . basename($file) . ".");
		break;
	}
};

/**
 * --rollback filename
 */
$__rollback_file = function($climate, $filename) use ($m) {
	$files = $m->getMigrations();

	if(!strpos($filename, '.php')) $filename .= '.php';

	foreach ($files as $file) {
		if(basename($file) !== $filename) continue;

		if(!$m->isMigrated($file)) {
			$climate->red("$filename wasn't migrated.");
			break;
		}

		$m->rollback($file);
		$climate->out("Ran rollback on $filename.");
		break;
	}
};

/**
 * --info
 */
$__info = function($climate, $filename) use ($m) {
	$files = $m->getMigrations();

	if(!strpos($filename, '.php')) $filename .= '.php';

	foreach ($files as $key => $file) {
		if(basename($file) !== $filename) continue;
		$staticVars = $m->getStatics($file);
		$desc = str_replace(array("\n", "\r\n", "\r"), "¶ ", $staticVars["description"]);

		$climate->bold($key)->br();
		$climate->bold('Path')->out($file)->br();
		$climate->bold('Status')->out($m->isMigrated($file) ? '<green>Migrated</green>' : '<dim>-</dim>')->br();
		$climate->bold('Description')->out($staticVars["description"])->br();
		$climate->bold('Last changed')->out(file_exists($file) ? date('c', filemtime($file)) : '<dim>-</dim>')->br();
		break;
	}
};

/**
 * --new
 */
$__new = function($climate, $desc, $type = 'default') use ($m) {
	try{
		$file = $m->createNew($desc, $type);
		$climate->green("Created new migration " . basename($file));
	} catch (WireException $e){
		$climate->red($e->getMessage());
	}
};

/**
 * Listview (default)
 */
$__list = function($climate) use ($m) {
	$files = $m->getMigrations();
	$data = array_map(function($file) use ($m) {
		$staticVars = $m->getStatics($file);
		$desc = str_replace(array("\n", "\r\n", "\r"), "¶ ", $staticVars["description"]);
		$desc = strlen($desc) > 51 ? substr($desc, 0, 50) . '…' : $desc;
		$desc = str_replace("¶", "<dim>¶</dim>", $desc);
		$type = $m->getType($file);
		$type = substr($type, 0, 1);

		return array(
			'Filename <dim>Type</dim>' => '<bold>' . basename($file, '.php') . '</bold> <dim>' . $type . '</dim>',
			'Description' => $desc,
			'St.' => $m->isMigrated($file) ? '<green>Mig</green>' : '<dim> - </dim>'
		);
	}, $files);

	$climate->table($data);
};

/**
 * Trigger the argument closures
 */

// --help
if($climate->arguments->defined('help'))
	$__help($climate);
// --newTemplate
else if($climate->arguments->defined('newTemplate'))
	$__new($climate, $climate->arguments->get('newTemplate'), 'template');
// --newField
else if($climate->arguments->defined('newField'))
	$__new($climate, $climate->arguments->get('newField'), 'field');
// --new
else if($climate->arguments->defined('new'))
	$__new($climate, $climate->arguments->get('new'), 'default');
// --migrate
else if($climate->arguments->defined('migrate'))
	$filename = $climate->arguments->get('migrate')
		? $__migrate_file($climate, $filename)
		: $__migrate_new($climate);
// --rollback
else if($climate->arguments->defined('rollback'))
	$filename = $climate->arguments->get('rollback')
		? $__rollback_file($climate, $filename)
		: $__rollback_latest($climate);
// --info
else if($filename = $climate->arguments->get('info'))
	$__info($climate, $filename);
// (--list)
else if(!$climate->arguments->trailing()) $__list($climate);
else $__help($climate);