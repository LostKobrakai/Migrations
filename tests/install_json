#!/usr/bin/env php
<?php

/**
 * ProcessWire Installer
 *
 * Because this installer runs before PW2 is installed, it is largely self contained.
 * It's a quick-n-simple single purpose script that's designed to run once, and it should be deleted after installation.
 * This file self-executes using code found at the bottom of the file, under the Installer class. 
 *
 * Note that it creates this file once installation is completed: /site/assets/installed.php
 * If that file exists, the installer will not run. So if you need to re-run this installer for any
 * reason, then you'll want to delete that file. This was implemented just in case someone doesn't delete the installer.
 * 
 * ProcessWire 3.x (development), Copyright 2016 by Ryan Cramer
 * https://processwire.com
 * 
 */

define("PROCESSWIRE_INSTALL", "3.x"); 

/**
 * class Installer
 *
 * Self contained class to install ProcessWire 2.x
 *
 */
class Installer {

	/**
	 * Whether or not we force installed files to be copied. 
	 *
	 * If false, we attempt a faster rename of directories instead.
	 *
	 */
	const FORCE_COPY = true; 

	/**
	 * Replace existing database tables if already present?
	 *
	 */
	const REPLACE_DB = true; 

	/**
	 * Minimum required PHP version to install ProcessWire
	 *
	 */
	const MIN_REQUIRED_PHP_VERSION = '5.3.8';

	/**
	 * File permissions, determined in the dbConfig function
	 *
	 * Below are last resort defaults
	 *
	 */
	protected $chmodDir = "0777";
	protected $chmodFile = "0666";

	/**
	 * Available color themes
	 *
	 */
	protected $colors = array(
		'classic',
		'warm',
		);

	public function execute()
	{
		// Read data
		$data = file_get_contents(__DIR__ . '/install.json');
		if($data === false){
			$this->err('Cannot read install.json');
			$this->doExit();
		}
		$data = json_decode($data, true);
		if($data === null){
			$this->err('JSON error: ' . json_last_error());
			$this->doExit();
		}

		// Convert data
		$keys = array_map(function($key){
			return 'db' . ucfirst($key);
		}, array_keys($data['db']));
		$data['db'] = array_combine($keys, array_values($data['db']));

		$dbValues = array_merge($data['db'], array(
			'timezone' => $data['timezone'],
			'chmodDir' => $data['chmod']['dir'],
			'chmodFile' => $data['chmod']['file'],
			'httpHosts' => implode("\n", $data['httpHosts'])
		));

		$data['admin']['admin_name'] = $data['admin']['url'];
		$data['admin']['userpass'] = $data['admin']['password'];
		$data['admin']['useremail'] = $data['admin']['email'];
		$data['admin']['colors'] = '';
		
		// Run
		$this->initProfile($data['profile']);
		$this->compatibilityCheck();
		$values = $this->dbConfig($dbValues);
		$this->dbSaveConfig($values);

		require(__DIR__ . "/index.php");
		$this->adminAccountSave($wire, $data['admin']);
		$this->getRemoveableItems($wire, $data['remove'], false, true); 

		
		echo PHP_EOL;
	}

	/**
	 * Check if the given function $name exists and report OK or fail with $label
	 *
	 */
	protected function checkFunction($name, $label) {
		if(function_exists($name)) $this->ok("$label"); 
			else $this->err("Fail: $label"); 
	}

	/**
	 * Find all profile directories (site-*) in the current dir and return info array for each
	 * 
	 * @return array
	 * 
	 */
	protected function findProfiles() {
		$profiles = array(
			'site-beginner' => null,
			'site-default' => null, // preferred starting order
			'site-languages' => null, 
			'site-blank' => null
			); 
		$dirTests = array(
			'install', 
			'templates',
			'assets',
			);
		$fileTests = array(
			'config.php',
			'templates/admin.php',
			'install/install.sql',
			);
		foreach(new \DirectoryIterator(dirname(__FILE__)) as $dir) {
			if($dir->isDot() || !$dir->isDir()) continue; 
			$name = $dir->getBasename();
			$path = rtrim($dir->getPathname(), '/') . '/';
			if(strpos($name, 'site-') !== 0) continue;
			$passed = true;
			foreach($dirTests as $test) if(!is_dir($path . $test)) $passed = false;
			foreach($fileTests as $test) if(!file_exists($path . $test)) $passed = false; 
			if(!$passed) continue;
			$profile = array('name' => str_replace('site-', '', $name));
			$infoFile = $path . 'install/info.php';
			if(file_exists($infoFile)) {
				include($infoFile);
				if(isset($info) && is_array($info)) {
					$profile = array_merge($profile, $info); 
				}
			}
			$profiles[$name] = $profile;
		}
		// remove any preferred starting order profiles that weren't present
		foreach($profiles as $name => $profile) {
			if(is_null($profile)) unset($profiles[$name]); 	
		}
		return $profiles; 
	}
	
	/**
	 * Step 1a: Determine profile
	 *
	 */
	protected function initProfile($profile) {
		
		if(is_file(__DIR__ . "/site/install/install.sql")) {
			$this->ok("Found installation profile in /site/install/");
			return;
		}

		if(is_dir(__DIR__ . "/site/")) {
			$this->ok("Found /site/ -- already installed? ");
			return;
		}
		
		$profile = preg_replace('/[^-a-zA-Z0-9_]/', '', $profile);
		$profile = 'site-' . $profile;
		
		if(@rename(__DIR__ . "/$profile", __DIR__ . "/site")) {
			$this->ok("Renamed /$profile => /site");
			return;
		}

		$this->err("File system is not writable by this installer. Before continuing, please rename '/$profile' to '/site'");
		$this->doExit();

	}

	/**
	 * Step 1b: Check for ProcessWire compatibility
	 *
	 */
	protected function compatibilityCheck() {
		
		if(version_compare(PHP_VERSION, self::MIN_REQUIRED_PHP_VERSION) >= 0) {
			$this->ok("PHP version " . PHP_VERSION);
		} else {
			$this->err("ProcessWire requires PHP version " . self::MIN_REQUIRED_PHP_VERSION . " or newer. You are running PHP " . PHP_VERSION);
		}
		
		if(extension_loaded('pdo_mysql')) {
			$this->ok("PDO (mysql) database"); 
		} else {
			$this->err("PDO (pdo_mysql) is required (for MySQL database)"); 
		}

		$this->checkFunction("filter_var", "Filter functions (filter_var)");
		$this->checkFunction("mysqli_connect", "MySQLi (not required by core, but may be required by some 3rd party modules)");
		$this->checkFunction("imagecreatetruecolor", "GD 2.0 or newer"); 
		$this->checkFunction("json_encode", "JSON support");
		$this->checkFunction("preg_match", "PCRE support"); 
		$this->checkFunction("ctype_digit", "CTYPE support");
		$this->checkFunction("iconv", "ICONV support"); 
		$this->checkFunction("session_save_path", "SESSION support"); 
		$this->checkFunction("hash", "HASH support"); 
		$this->checkFunction("spl_autoload_register", "SPL support"); 

		if(function_exists('apache_get_modules')) {
			if(in_array('mod_rewrite', apache_get_modules())) $this->ok("Found Apache module: mod_rewrite"); 
				else $this->err("Apache mod_rewrite does not appear to be installed and is required by ProcessWire."); 
		} else {
			// apache_get_modules doesn't work on a cgi installation.
			// check for environment var set in htaccess file, as submitted by jmarjie. 
			$mod_rewrite = getenv('HTTP_MOD_REWRITE') == 'On' || getenv('REDIRECT_HTTP_MOD_REWRITE') == 'On' ? true : false;
			if($mod_rewrite) {
				$this->ok("Found Apache module (cgi): mod_rewrite");
			} else {
				$this->err("Unable to determine if Apache mod_rewrite (required by ProcessWire) is installed. On some servers, we may not be able to detect it until your .htaccess file is place. Please click the 'check again' button at the bottom of this screen, if you haven't already."); 
			}
		}
		
		if(class_exists('\ZipArchive')) {
			$this->ok("ZipArchive support"); 
		} else {
			$this->warn("ZipArchive support was not found. This is recommended, but not required to complete installation."); 
		}
	
		$dirs = array(
			// directory => required?
			__DIR__ . '/site/assets/' => true,
			__DIR__ . '/site/modules/' => false, 
			);
		foreach($dirs as $dir => $required) {
			$d = ltrim($dir, '.'); 
			if(!file_exists($dir)) {
				$this->err("Directory $d does not exist! Please create this and make it writable before continuing."); 
			} else if(is_writable($dir)) {
				$this->ok("$d is writable");
			} else if($required) {
				$this->err("Directory $d must be writable. Please adjust the server permissions before continuing.");
			} else {
				$this->warn("We recommend that directory $d be made writable before continuing."); 
			}
		}
		
		if(is_writable(__DIR__ . "/site/config.php")) $this->ok("/site/config.php is writable"); 
			else $this->err("/site/config.php must be writable. Please adjust the server permissions before continuing."); 
		
		if(!is_file(__DIR__ . "/.htaccess") || !is_readable(__DIR__ . "/.htaccess")) {
			if(@rename(__DIR__ . "/htaccess.txt", __DIR__ . "/.htaccess")) $this->ok("Installed .htaccess"); 
				else $this->err("/.htaccess doesn't exist. Before continuing, you should rename the included htaccess.txt file to be .htaccess (with the period in front of it, and no '.txt' at the end)."); 

		} else if(!strpos(file_get_contents(__DIR__ . "/.htaccess"), "PROCESSWIRE")) {
			$this->err("/.htaccess file exists, but is not for ProcessWire. Please overwrite or combine it with the provided /htaccess.txt file (i.e. rename /htaccess.txt to /.htaccess, with the period in front)."); 

		} else {
			$this->ok(".htaccess looks good"); 
		}
	}

	/**
	 * Step 2: Configure the database and file permission settings
	 *
	 */
	protected function dbConfig($values = array()) {

		if(!is_file(__DIR__ . "/site/install/install.sql")){
			$this->err("There is no installation profile in /site/. Please place one there before continuing. You can get it at processwire.com/download"); 
			$this->doExit();
		}

		if(!isset($values['dbName'])) $values['dbName'] = '';
		// @todo: are there PDO equivalents for the ini_get()s below?
		if(!isset($values['dbHost'])) $values['dbHost'] = ini_get("mysqli.default_host"); 
		if(!isset($values['dbPort'])) $values['dbPort'] = ini_get("mysqli.default_port"); 
		if(!isset($values['dbUser'])) $values['dbUser'] = ini_get("mysqli.default_user"); 
		if(!isset($values['dbPass'])) $values['dbPass'] = ini_get("mysqli.default_pw");
		if(!isset($values['dbEngine'])) $values['dbEngine'] = 'MyISAM';

		if(!$values['dbHost']) $values['dbHost'] = 'localhost';
		if(!$values['dbPort']) $values['dbPort'] = 3306; 
		if(empty($values['dbCharset'])) $values['dbCharset'] = 'utf8';

		foreach($values as $key => $value) {
			if(strpos($key, 'chmod') === 0) {
				$values[$key] = (int) $value;
			} else if($key != 'httpHosts') {
				$values[$key] = htmlspecialchars($value, ENT_QUOTES, 'utf-8'); 
			}
		}

		$cgi = false;
		$defaults = array();

		if(is_writable(__FILE__)) {
			$defaults['chmodDir'] = "755";
			$defaults['chmodFile'] = "644";
			$cgi = true;
		} else {
			$defaults['chmodDir'] = "777";
			$defaults['chmodFile'] = "666";
		}

		$timezone = isset($values['timezone']) ? $values['timezone'] : date_default_timezone_get(); 
		$timezones = $this->timezones();
		if(!$timezone || !in_array($timezone, $timezones)) {
			$timezone = ini_get('date.timezone'); 
			if(!$timezone || !in_array($timezone, $timezones)) $timezone = 'America/New_York';
		}

		$defaults['timezone'] = $timezone; 
		if(isset($_SERVER['HTTP_HOST']))
			$defaults['httpHosts'] = strtolower(filter_var($_SERVER['HTTP_HOST'], FILTER_SANITIZE_URL));
		else
			$defaults['httpHosts'] = '';

		if(strpos($defaults['httpHosts'], 'www.') === 0) {
			$defaults['httpHosts'] .= "\n" . substr($defaults['httpHosts'], 4); 
		} else if(substr_count($defaults['httpHosts'], '.') == 1) {
			$defaults['httpHosts'] .= "\n" . "www.$defaults[httpHosts]";
		}
		if(isset($_SERVER['SERVER_NAME'])){
			if($_SERVER['SERVER_NAME'] && $_SERVER['SERVER_NAME'] != $_SERVER['HTTP_HOST']) {
				$defaults['httpHosts'] .= "\n" . $_SERVER['SERVER_NAME']; 
			}
		}
		
		if(isset($values['httpHosts']) && is_array($values['httpHosts'])) $values['httpHosts'] = implode("\n", $values['httpHosts']); 

		return array_merge($defaults, $values);
	}

	/**
	 * Step 3: Save database configuration, then begin profile import
	 *
	 */
	protected function dbSaveConfig($values) {
		
		// file permissions
		$fields = array('chmodDir', 'chmodFile');
		foreach($fields as $field) {
			$value = (int) $values[$field];
			if(strlen("$value") !== 3){
				$this->err("Value for '$field' is invalid");
			}
			else $this->$field = "0$value";
			$values[$field] = $value;
		}

		$timezone = (int) $values['timezone'];
		$timezones = $this->timezones();
		if(isset($timezones[$timezone])) {
			$value = $timezones[$timezone]; 
			if(strpos($value, '|')) list($label, $value) = explode('|', $value); 
			$values['timezone'] = $value; 
		} else {
			$values['timezone'] = 'America/New_York';
		}

		$httpHosts = trim($values['httpHosts']);
		$values['httpHosts'] = array();
		if(strlen($httpHosts)) {
			$httpHosts = str_replace(array("'", '"'), '', $httpHosts);
			$httpHosts = explode("\n", $httpHosts);
			foreach($httpHosts as $key => $host) {
				$host = strtolower(trim(filter_var($host, FILTER_SANITIZE_URL)));
				$httpHosts[$key] = $host;
			}
			$values['httpHosts'] = $httpHosts;
		}

		// db configuration
		$fields = array('dbUser', 'dbName', 'dbPass', 'dbHost', 'dbPort', 'dbEngine', 'dbCharset');
		foreach($fields as $field) {
			$value = get_magic_quotes_gpc() ? stripslashes($values[$field]) : $values[$field]; 
			$value = substr($value, 0, 255); 
			if(strpos($value, "'") !== false) $value = str_replace("'", "\\" . "'", $value); // allow for single quotes (i.e. dbPass)
			$values[$field] = trim($value); 
		}
	
		$values['dbCharset'] = ($values['dbCharset'] === 'utf8mb4' ? 'utf8mb4' : 'utf8'); 
		$values['dbEngine'] = ($values['dbEngine'] === 'InnoDB' ? 'InnoDB' : 'MyISAM'); 
		// if(!ctype_alnum($values['dbCharset'])) $values['dbCharset'] = 'utf8';

		if(!$values['dbUser'] || !$values['dbName'] || !$values['dbPort']) {
			
			$this->err("Missing database configuration fields"); 
			$this->doExit();
			
		}
	
		error_reporting(0); 
		
		$dsn = "mysql:dbname=$values[dbName];host=$values[dbHost];port=$values[dbPort]";
		$driver_options = array(
			\PDO::MYSQL_ATTR_INIT_COMMAND => "SET NAMES 'UTF8'",
			\PDO::ATTR_ERRMODE => \PDO::ERRMODE_EXCEPTION
			);
		
		try {
			$database = new \PDO($dsn, $values['dbUser'], $values['dbPass'], $driver_options);
			
		} catch(\Exception $e) {
			
			if($e->getCode() !== 1049) {
				$this->err("Database connection information did not work.");
				$this->err($e->getMessage());
				$this->doExit();
			}

			$database = $this->dbCreateDatabase($dsn, $values, $driver_options); 
		}

		$this->ok("Database connection successful to " . htmlspecialchars($values['dbName'])); 
		$options = array(
			'dbCharset' => strtolower($values['dbCharset']), 
			'dbEngine' => $values['dbEngine']
		);
	
		if($options['dbEngine'] == 'InnoDB') {
			$query = $database->query("SELECT VERSION()");
			list($dbVersion) = $query->fetch(\PDO::FETCH_NUM);
			if(version_compare($dbVersion, "5.6.4", "<")) {
				$options['dbEngine'] = 'MyISAM';
				$values['dbEngine'] = 'MyISAM';
				$this->err("Your MySQL version is $dbVersion and InnoDB requires 5.6.4 or newer. Engine changed to MyISAM.");
			}
		}

		$this->dbSaveConfigFile($values);
		$this->profileImport($database, $options);
	}

	/**
	 * Create database
	 * 
	 * Note: only handles database names that stick to ascii _a-zA-Z0-9.
	 * For database names falling outside that set, they should be created
	 * ahead of time. 
	 * 
	 * Contains contributions from @plauclair PR #950
	 * 
	 * @param string $dsn
	 * @param array $values
	 * @param array $driver_options
	 * @return PDO|null
	 * 
	 */
	protected function dbCreateDatabase($dsn, $values, $driver_options) {
		
		$dbCharset = preg_replace('/[^a-z0-9]/', '', strtolower(substr($values['dbCharset'], 0, 64)));
		$dbName = preg_replace('/[^_a-zA-Z0-9]/', '', substr($values['dbName'], 0, 64));
		$dbNameTest = str_replace('_', '', $dbName);

		if(!ctype_alnum($dbNameTest) || $dbName !== $values['dbName']
			|| !ctype_alnum($dbCharset) || $dbCharset !== $values['dbCharset']) {
			$this->err("Unable to create database with that name. Please create the database with another tool and try again."); 
			$this->doExit();
		}

		try {
			$dsn2 = "mysql:host=$values[dbHost];port=$values[dbPort]";
			$database = new \PDO($dsn2, $values['dbUser'], $values['dbPass'], $driver_options);
			$database->exec("CREATE SCHEMA IF NOT EXISTS `$dbName` DEFAULT CHARACTER SET `$dbCharset`");
			// reconnect
			$database = new \PDO($dsn, $values['dbUser'], $values['dbPass'], $driver_options);
			if($database) $this->ok("Created database: $dbName"); 
			else $this->doExit();

		} catch(\Exception $e) {
			$this->err("Failed to create database with name $dbName");
			$this->err($e->getMessage()); 
			$this->doExit();
		}
		
		return $database; 
	}

	/**
	 * Save configuration to /site/config.php
	 *
	 */
	protected function dbSaveConfigFile(array $values) {

		$salt = md5(mt_rand() . microtime(true)); 

		$cfg = 	"\n/**" . 
			"\n * Installer: Database Configuration" . 
			"\n * " . 
			"\n */" . 
			"\n\$config->dbHost = '$values[dbHost]';" . 
			"\n\$config->dbName = '$values[dbName]';" . 
			"\n\$config->dbUser = '$values[dbUser]';" . 
			"\n\$config->dbPass = '$values[dbPass]';" . 
			"\n\$config->dbPort = '$values[dbPort]';";
		
		if(!empty($values['dbCharset']) && strtolower($values['dbCharset']) != 'utf8') $cfg .= "\n\$config->dbCharset = '$values[dbCharset]';";
		if(!empty($values['dbEngine']) && $values['dbEngine'] == 'InnoDB') $cfg .= "\n\$config->dbEngine = 'InnoDB';";
		
		$cfg .= 
			"\n" . 
			"\n/**" . 
			"\n * Installer: User Authentication Salt " . 
			"\n * " . 
			"\n * Must be retained if you migrate your site from one server to another" . 
			"\n * " . 
			"\n */" . 
			"\n\$config->userAuthSalt = '$salt'; " . 
			"\n" . 
			"\n/**" . 
			"\n * Installer: File Permission Configuration" . 
			"\n * " . 
			"\n */" . 
			"\n\$config->chmodDir = '0$values[chmodDir]'; // permission for directories created by ProcessWire" . 	
			"\n\$config->chmodFile = '0$values[chmodFile]'; // permission for files created by ProcessWire " . 	
			"\n" . 
			"\n/**" . 
			"\n * Installer: Time zone setting" . 
			"\n * " . 
			"\n */" . 
			"\n\$config->timezone = '$values[timezone]';" . 	
			"\n" . 
			"\n/**" .
			"\n * Installer: Unix timestamp of date/time installed" .
			"\n * " .
			"\n * This is used to detect which when certain behaviors must be backwards compatible." .
			"\n * Please leave this value as-is." .
			"\n * " .
			"\n */" .
			"\n\$config->installed = " . time() . ";" .
			"\n\n";

		if(!empty($values['httpHosts'])) {
			$cfg .= "" . 
			"\n/**" . 
			"\n * Installer: HTTP Hosts Whitelist" . 
			"\n * " . 
			"\n */" . 
			"\n\$config->httpHosts = array("; 
			foreach($values['httpHosts'] as $host) $cfg .= "'$host', ";
			$cfg = rtrim($cfg, ", ") . ");\n\n";
		}
		
		if(($fp = fopen(__DIR__ . "/site/config.php", "a")) && fwrite($fp, $cfg)) {
			fclose($fp); 
			$this->ok("Saved configuration to ./site/config.php"); 
			return true; 
		}

		$this->err("Error saving configuration to ./site/config.php. Please make sure it is writable."); 
		$this->doExit();
	}

	/**
	 * Step 3b: Import profile
	 *
	 */
	protected function profileImport($database, array $options) {

		$profile = __DIR__ . "/site/install/";
		if(!is_file("{$profile}install.sql")){
			$this->err("No installation profile found in {$profile}");
			$this->doExit();
		}

		try {
			$query = $database->prepare("SHOW COLUMNS FROM pages"); 
			$result = $query->execute();
		} catch(\Exception $e) {
			$result = false;
		}

		if(self::REPLACE_DB || !$result || $query->rowCount() == 0) {

			$this->profileImportSQL($database, __DIR__ . "/wire/core/install.sql", $profile . "install.sql", $options); 
			
			if(is_dir($profile . "files")) $this->profileImportFiles($profile);
				else $this->mkdir(__DIR__ . "/site/assets/files/"); 
			
			$this->mkdir(__DIR__ . "/site/assets/cache/"); 
			$this->mkdir(__DIR__ . "/site/assets/logs/"); 
			$this->mkdir(__DIR__ . "/site/assets/sessions/"); 
			
		} else {
			$this->ok("A profile is already imported, skipping..."); 
		}


		// copy default site modules /site-default/modules/ to /site/modules/
		$dir = __DIR__ . "/site/modules/";
		$defaultDir = __DIR__ . "/site-default/modules/"; 
		if(!is_dir($dir)) $this->mkdir($dir);
		if(is_dir($defaultDir)) {
			if(is_writable($dir)) {
				$result = $this->copyRecursive($defaultDir, $dir, false); 	
				if($result) {
					$this->ok("Imported: $defaultDir => $dir"); 
					
				} else {
					$this->warn("Error Importing: $defaultDir => $dir"); 
				}
			} else {
				$this->warn("$dir is not writable, unable to install default site modules (recommended, but not required)"); 
			}
		}
	}


	/**
	 * Import files to profile
	 *
	 */
	protected function profileImportFiles($fromPath) {

		$dir = new \DirectoryIterator($fromPath);

		foreach($dir as $file) {

			if($file->isDot()) continue; 
			if(!$file->isDir()) continue; 

			$dirname = $file->getFilename();
			$pathname = $file->getPathname();

			if(is_writable($pathname) && self::FORCE_COPY == false) {
				// if it's writable, then we know all the files are likely writable too, so we can just rename it
				$result = rename($pathname, __DIR__ . "/site/assets/$dirname/"); 

			} else {
				// if it's not writable, then we will make a copy instead, and that copy should be writable by the server

				$result = $this->copyRecursive($pathname, __DIR__ . "/site/assets/$dirname/"); 
			}

			if($result) $this->ok("Imported: $pathname => ./site/assets/$dirname/"); 
			else {
				$this->err("Error Importing: $pathname => ./site/assets/$dirname/"); 
				$this->doExit();
			}
			
		}
	}
	
	/**
	 * Import profile SQL dump
	 *
	 */
	protected function profileImportSQL($database, $file1, $file2, array $options = array()) {
		$defaults = array(
			'dbEngine' => 'MyISAM',
			'dbCharset' => 'utf8', 
			);
		$options = array_merge($defaults, $options); 
		$restoreOptions = array();
		$replace = array();
		if($options['dbEngine'] != 'MyISAM') {
			$replace['ENGINE=MyISAM'] = "ENGINE=$options[dbEngine]";
			$this->warn("Engine changed to '$options[dbEngine]', please keep an eye out for issues."); 
		}
		if($options['dbCharset'] != 'utf8') {
			$replace['CHARSET=utf8'] = "CHARSET=$options[dbCharset]";
			if(strtolower($options['dbCharset']) === 'utf8mb4') {
				$replace['(255)'] = '(250)'; // max ley length in utf8mb4 is 1000 (250 * 4)
			}
			$this->warn("Character set has been changed to '$options[dbCharset]', please keep an eye out for issues."); 
		}
		if(count($replace)) $restoreOptions['findReplaceCreateTable'] = $replace; 
		require_once(__DIR__ . "/wire/core/WireDatabaseBackup.php"); 
		if(class_exists ('ProcessWire\WireDatabaseBackup'))
			$backup = new ProcessWire\WireDatabaseBackup(); 
		else
			$backup = new WireDatabaseBackup(); 
		$backup->setDatabase($database);
		$backup->restoreMerge($file1, $file2, $restoreOptions);
		if(!count($backup->errors())) {
			$this->ok("Imported database file: $file1");
			$this->ok("Imported database file: $file2"); 
		} else {
			$this->err("Cannot import database"); 
			foreach($backup->errors() as $error)
				$this->err($error); 
			$this->doExit();
		}
	}


	protected function getRemoveableItems($wire, $postItems = array(), $getMarkup = false, $removeNow = false) {

		$root = dirname(__FILE__) . '/';
		$out = '';
		
		$items = array(
			'install-php' => array(
				'label' => 'Remove installer (install.php) when finished', 
				'file' => "/install.php", 
				'path' => $root . "install.php", 
				),
			'install-dir' => array(
				'label' => 'Remove installer site profile assets (/site/install/)',
				'path' => $root . "site/install/", 
				'file' => '/site/install/', 
				), 
			'gitignore' => array(
				'label' => 'Remove .gitignore file',
				'path' => $root . ".gitignore",
				'file' => '/.gitignore',
				)
		);
		
		foreach($this->findProfiles() as $name => $profile) {
			$title = empty($profile['title']) ? $name : $profile['title'];
			$items[$name] = array(
				'label' => "Remove unused $title site profile (/$name/)", 
				'path' => $root . "$name/",
				'file' => "/$name/", 
			);
		}
		
		if(!$removeNow) return;

		foreach($items as $name => $item) {
			if(!file_exists($item['path'])) continue;

			$disabled = !is_writable($item['path']);
			$checked = in_array($name, $postItems);

			if($checked && !$disabled) {
				if(is_dir($item['path'])) {
					if(function_exists ('ProcessWire\wireRmdir'))
						$success = ProcessWire\wireRmdir($item['path'], true); 
					else
						$success = wireRmdir($item['path'], true); 
				} else if(is_file($item['path'])) {
					$success = @unlink($item['path']); 	
				} else {
					$success = true; 
				}
				if($success) {
					$this->ok("Completed: " . $item['label']); 
				} else {
					$this->err("Unable to remove $item[file] - please remove manually, as it is no longer needed"); 
				}
			} else if($disabled) {
				$this->warn("Please remove $item[file] from the file system as it is no longer needed"); 
			} else if(!$checked) {
				$this->warn("Remember to remove $item[file] from the file system before migrating to production use"); 
			}
		}
		
		return $items; 
	}

	/**
	 * Save submitted admin account form
	 *
	 */
	protected function adminAccountSave($wire, $values) {

		$sanitizer = $wire->sanitizer; 
		$values = (object) $values;

		if(!$values->username || !$values->userpass){
			$this->err("Missing account information"); 
			$this->doExit();
		}
		if(strlen($values->userpass) < 6){
			$this->err("Password must be at least 6 characters long"); 
			$this->doExit();
		}

		$username = $sanitizer->pageName($values->username); 
		if($username != $values->username){
			$this->err("Username must be only a-z 0-9"); 
			$this->doExit();
		}
		if(strlen($username) < 2){
			$this->err("Username must be at least 2 characters long"); 
			$this->doExit();
		} 

		$adminName = $sanitizer->pageName($values->admin_name);
		if($adminName != $values->admin_name){
			$this->err("Admin login URL must be only a-z 0-9"); 
			$this->doExit();
		}
		if($adminName == 'wire' || $adminName == 'site'){
			$this->err("Admin name may not be 'wire' or 'site'"); 
			$this->doExit();
		}
		if(strlen($adminName) < 2){
			$this->err("Admin login URL must be at least 2 characters long"); 
			$this->doExit();
		}

		$email = strtolower($sanitizer->email($values->useremail)); 
		if($email != strtolower($values->useremail)){
			$this->err("Email address did not validate"); 
			$this->doExit();
		}
	
		$superuserRole = $wire->roles->get("name=superuser");
		$user = $wire->users->get($wire->config->superUserPageID); 

		if(!$user->id) {
			$user = new User(); 
			$user->id = $wire->config->superUserPageID; 
		}

		$user->name = $username;
		$user->pass = $values->userpass; 
		$user->email = $email;

		if(!$user->roles->has("superuser")) $user->roles->add($superuserRole); 

		$admin = $wire->pages->get($wire->config->adminRootPageID); 
		$admin->of(false);
		$admin->name = $adminName;

		try {
			$wire->users->save($user); 
			$wire->pages->save($admin);

		} catch(\Exception $e) {
			$this->err($e->getMessage()); 
			$this->doExit();
		}

		$adminName = htmlentities($adminName, ENT_QUOTES, "UTF-8");

		$this->ok("User account saved: {$user->name}"); 

		$colors = $wire->sanitizer->pageName($values->colors); 
		if(!in_array($colors, $this->colors)) $colors = reset($this->colors); 
		$theme = $wire->modules->getInstall('AdminThemeDefault'); 
		$configData = $wire->modules->getModuleConfigData('AdminThemeDefault'); 
		$configData['colors'] = $colors;
		$wire->modules->saveModuleConfigData('AdminThemeDefault', $configData); 
		$this->ok("Saved admin color set $colors - you will see this when you login."); 

		$this->ok("Note that future runtime errors are logged to /site/assets/logs/errors.txt (not web accessible).");
		$this->ok("For more configuration options see /wire/config.php.");
		$this->warn("Please make your /site/config.php file non-writable, and readable only to you and Apache.");
		
		if(is_writable(__DIR__ . "/site/modules/")){
			if(function_exists ('ProcessWire\wireChmod'))
				ProcessWire\wireChmod(__DIR__ . "/site/modules/", true); 
			else
				wireChmod(__DIR__ . "/site/modules/", true); 
		}

		$this->ok("Your admin URL is /$adminName/");


		file_put_contents(__DIR__ . "/site/assets/installed.php", "<?php // The existence of this file prevents the installer from running. Don't delete it unless you want to re-run the install or you have deleted ./install.php."); 
	}

	/******************************************************************************************************************
	 * OUTPUT FUNCTIONS
	 *
	 */
	
	/**
	 * Report and log an error
	 *
	 */
	protected function err($str) {
		echo PHP_EOL . "ERR: $str";
		return false;
	}

	/**
	 * Action/warning
	 *
	 */
	protected function warn($str) {
		echo PHP_EOL . "WARN:$str</li>";
		return false;
	}
	/**
	 * Report success
	 *
	 */
	protected function ok($str) {
		echo PHP_EOL . "OK:  $str";
		return true; 
	}

	protected function doExit(){
		echo PHP_EOL;
		die();
	}


	/******************************************************************************************************************
	 * FILE FUNCTIONS
	 *
	 */

	/**
	 * Create a directory and assign permission
	 *
	 */
	protected function mkdir($path, $showNote = true) {
		if(is_dir($path) || mkdir($path)) {
			chmod($path, octdec($this->chmodDir));
			if($showNote) $this->ok("Created directory: $path"); 
			return true; 
		} else {
			if($showNote) $this->err("Error creating directory: $path"); 
			return false; 
		}
	}

	/**
	 * Copy directories recursively
	 *
	 */
	protected function copyRecursive($src, $dst, $overwrite = true) {

		if(substr($src, -1) != '/') $src .= '/';
		if(substr($dst, -1) != '/') $dst .= '/';

		$dir = opendir($src);
		$this->mkdir($dst, false);

		while(false !== ($file = readdir($dir))) {
			if($file == '.' || $file == '..') continue; 
			if(is_dir($src . $file)) {
				$this->copyRecursive($src . $file, $dst . $file);
			} else {
				if(!$overwrite && file_exists($dst . $file)) {
					// don't replace existing files when $overwrite == false;
				} else {
					copy($src . $file, $dst . $file);
					chmod($dst . $file, octdec($this->chmodFile));
				}
			}
		}

		closedir($dir);
		return true; 
	} 
	
	protected function timezones() {
		$timezones = timezone_identifiers_list();
		$extras = array(
			'US Eastern|America/New_York',
			'US Central|America/Chicago',
			'US Mountain|America/Denver',
			'US Mountain (no DST)|America/Phoenix',
			'US Pacific|America/Los_Angeles',
			'US Alaska|America/Anchorage',
			'US Hawaii|America/Adak',
			'US Hawaii (no DST)|Pacific/Honolulu',
			);
		foreach($extras as $t) $timezones[] = $t; 
		return $timezones; 
	}


}

/****************************************************************************************************/

if(is_file(__DIR__ . "/site/assets/installed.php"))
	die("This installer has already run. Please delete it."); 
error_reporting(E_ALL | E_STRICT); 
$installer = new Installer();
$installer->execute();

